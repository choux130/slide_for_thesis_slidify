geom_point(aes(shape=est),size=3, position=pd) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1, position=pd)+
ggtitle("Area")
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1, position=pd)+
ggtitle("Area")
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=value),size=3, position=pd) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1, position=pd)+
ggtitle("Area")
ggplot(d_a, aes(loc, value, color=est)) +
geom_linerange(aes(ymin = low, ymax = up))
ggplot(d_a, aes(loc, value, color=est)) +
geom_errorbar(aes(ymin=low,ymax=up)
ggplot(d_a, aes(loc, value, color=est)) +
geom_errorbar(aes(ymin=low,ymax=up))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=value),size=3, position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)
ci_mle.area.p
d_a=data.frame(
est=rep(c("WM", "MLE"),each=3),
loc=rep(c("P","M","D"),2),
value= c(wm.area[2:4],mle.area[2:4]),
low=c(ci_wm.area.p[1], ci_wm.area.m[1],ci_wm.area.d[1],
ci_mle.area.p[1], ci_mle.area.m[1],ci_mle.area.d[1]),
up=c(ci_wm.area.p[2], ci_wm.area.m[2],ci_wm.area.d[2],
ci_mle.area.p[2], ci_mle.area.m[2],ci_mle.area.d[2])
)
d_a[,3:5]=round(d_a[,3:5], 2)
pd <- position_dodge(width=0.5)
g_area= ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)
geom_errorbar(aes(ymin=low,ymax=up))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_color_manual(name="Estimator",
values=c("coral","steelblue"))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd, name="Estimator")+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_shape_manual(name="Estimator",values=c(17,19))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_shape_manual(name="Estimator",values=c(17,19))
d_a=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(wm.area[2:4],mle.area[2:4]),
low=c(ci_wm.area.p[1], ci_wm.area.m[1],ci_wm.area.d[1],
ci_mle.area.p[1], ci_mle.area.m[1],ci_mle.area.d[1]),
up=c(ci_wm.area.p[2], ci_wm.area.m[2],ci_wm.area.d[2],
ci_mle.area.p[2], ci_mle.area.m[2],ci_mle.area.d[2])
)
d_a[,3:5]=round(d_a[,3:5], 2)
pd <- position_dodge(width=0.5)
g_area= ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_shape_manual(name="Estimator",values=c(17,19))
g_are
g_area
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_shape_manual(name="Estimator",values=c(17,19))
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area") + coord_flip()
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33\% Simultaneous Confidence Interval of Area")+   coord_flip()
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33 \% Simultaneous Confidence Interval of Area")+   coord_flip()
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33 % Simultaneous Confidence Interval of Area")+   coord_flip()
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33% Simultaneous Confidence Interval of Area")+   coord_flip()
d_per=data.frame(
Estimator=rep(c("WM", "2TAE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(wm.per[2:4], stae.area[2:4]),
low=c(ci_wm.per.p[1], ci_wm.per.m[1],ci_wm.per.d[1],
ci_stae.per.p[1], ci_stae.per.m[1],stae.per.d[1]),
up=c(ci_wm.per.p[2], ci_wm.per.m[2],ci_wm.per.d[2],
ci_stae.per.p[2], ci_stae.per.m[2],ci_stae.per.d[2])
)
d_per[,3:5]=round(d_per[,3:5], 2)
d_per=data.frame(
Estimator=rep(c("WM", "2TAE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(wm.per[2:4], stae.per[2:4]),
low=c(ci_wm.per.p[1], ci_wm.per.m[1],ci_wm.per.d[1],
ci_stae.per.p[1], ci_stae.per.m[1],ci_stae.per.d[1]),
up=c(ci_wm.per.p[2], ci_wm.per.m[2],ci_wm.per.d[2],
ci_stae.per.p[2], ci_stae.per.m[2],ci_stae.per.d[2])
)
d_per[,3:5]=round(d_per[,3:5], 2)
d_per
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(am.cir[2:4], am.cir[2:4]),
low=c(ci_am.cir.p[1], ci_am.cir.m[1],ci_am.cir.d[1]),
up=c(ci_am.cir.p[2], ci_am.cir.m[2],ci_am.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 2)
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.cir[2:4]),
low=c(ci_am.cir.p[1], ci_am.cir.m[1],ci_am.cir.d[1]),
up=c(ci_am.cir.p[2], ci_am.cir.m[2],ci_am.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 2)
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.cir[2:4]),
low=c(ci_m.cir.p[1], ci_m.cir.m[1],ci_m.cir.d[1]),
up=c(ci_m.cir.p[2], ci_m.cir.m[2],ci_m.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 2)
d_cir
d_cir[,3:5]=round(d_cir[,3:5], 3)
d_cir
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.cir[2:4]),
low=c(ci_m.cir.p[1], ci_m.cir.m[1],ci_m.cir.d[1]),
up=c(ci_m.cir.p[2], ci_m.cir.m[2],ci_m.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 3)
d_cir
d_per
d_ar=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.ar[2:4]),
low=c(ci_m.ar.p[1], ci_m.ar.m[1],ci_m.ar.d[1]),
up=c(ci_m.ar.p[2], ci_m.ar.m[2],ci_m.ar.d[2])
)
d_ar[,3:5]=round(d_ar[,3:5], 3)
d_ar
ggplot(d_per, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33% Simultaneous Confidence Interval of Perimeter")+   coord_flip()
ggplot(d_cir, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33% Simultaneous Confidence Interval of Circularity")+ coord_flip()
g_ar= ggplot(d_ar, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33% Simultaneous Confidence Interval of Aspect Ratio")+   coord_flip()
g_ar
d_a_diff=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(t_mw.area.pd[2:4],t_mle.area.pd[2:4]),
low=c(ci_wm.area.pm[1], ci_wm.area.md[1],ci_wm.area.pd[1],
ci_mle.area.pm[1], ci_mle.area.md[1],ci_mle.area.pd[1]),
up=c(ci_wm.area.pm[2], ci_wm.area.md[2],ci_wm.area.pd[2],
ci_mle.area.pm[2], ci_mle.area.md[2],ci_mle.area.pd[2])
)
t_mw.area.pd
t_wn.area.pd
t_wm.area.pd
d_a_diff=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(t_wm.area.pm,t_wm.area.md, t_wm.area.pd,
t_mle.area.pm,t_mle.area.md,t_mle.area.pd),
low=c(ci_wm.area.pm[1], ci_wm.area.md[1],ci_wm.area.pd[1],
ci_mle.area.pm[1], ci_mle.area.md[1],ci_mle.area.pd[1]),
up=c(ci_wm.area.pm[2], ci_wm.area.md[2],ci_wm.area.pd[2],
ci_mle.area.pm[2], ci_mle.area.md[2],ci_mle.area.pd[2])
)
d_a_diff
d_a_diff[,3:5]=round(d_a[,3:5], 2)
d_a_diff
d_a_diff[,3:5]=round(d_a_diff[,3:5], 2)
d_a_diff
d_a_diff=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(t_wm.area.pm,t_wm.area.md, t_wm.area.pd,
t_mle.area.pm,t_mle.area.md,t_mle.area.pd),
low=c(ci_wm.area.pm[1], ci_wm.area.md[1],ci_wm.area.pd[1],
ci_mle.area.pm[1], ci_mle.area.md[1],ci_mle.area.pd[1]),
up=c(ci_wm.area.pm[2], ci_wm.area.md[2],ci_wm.area.pd[2],
ci_mle.area.pm[2], ci_mle.area.md[2],ci_mle.area.pd[2])
)
d_a_diff[,3:5]=round(d_a_diff[,3:5], 2)
d_a_diff
d_per_diff=data.frame(
Estimator=rep(c("WM", "2TAE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(t_wm.per.pm,t_wm.per.md, t_wm.per.pd,
t_stae.per.pm,t_stae.per.md,t_stae.per.pd),
low=c(ci_wm.per.pm[1], ci_wm.per.md[1],ci_wm.per.pd[1],
ci_stae.per.pm[1], ci_stae.per.md[1],ci_stae.per.pd[1]),
up=c(ci_wm.per.pm[2], ci_wm.per.md[2],ci_wm.per.pd[2],
ci_stae.per.pm[2], ci_stae.per.md[2],ci_stae.per.pd[2])
)
d_per_diff[,3:5]=round(d_per_diff[,3:5], 2)
d_per_diff
d_cir_diff=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(t_m.cir.pm,t_m.cir.md, t_m.cir.pd),
low=c(ci_m.cir.pm[1], ci_m.cir.md[1],ci_m.cir.pd[1]),
up=c(ci_m.cir.pm[2], ci_m.cir.md[2],ci_m.cir.pd[2])
)
d_cir_diff[,3:5]=round(d_cir_diff[,3:5], 2)
d_cir
ci_m.cir.pm
d_cir_diff=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(t_m.cir.pm,t_m.cir.md, t_m.cir.pd),
low=c(ci_m.cir.pm[1], ci_m.cir.md[1],ci_m.cir.pd[1]),
up=c(ci_m.cir.pm[2], ci_m.cir.md[2],ci_m.cir.pd[2])
)
d_cir_diff
d_cir_diff[,3:5]=round(d_cir_diff[,3:5], 3)
d_cir_diff
d_ar_diff=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(t_m.ar.pm,t_m.ar.md, t_m.ar.pd),
low=c(ci_m.ar.pm[1], ci_m.ar.md[1],ci_m.ar.pd[1]),
up=c(ci_m.ar.pm[2], ci_m.ar.md[2],ci_m.ar.pd[2])
)
d_ar_diff[,3:5]=round(d_ar_diff[,3:5], 3)
d_ar_diff
pd <- position_dodge(width=0.5)
g_area_diff= ggplot(d_a_diff,
aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area: 98.33% Simultaneous Confidence Interval of Difference by Location")+   coord_flip()
g_area_diff
\begin{figure}[!htbp]
\centering
<<echo=FALSE,warning=FALSE, message=FALSE,fig.width=8, fig.height=4>>=
library(Rmisc)
multiplot(plotlist = list(g_a,g_per), cols = 2)
@
\caption{95\% Confidence Interval for Overall mean and means by Locations for Area and Perimeter}
\label{m_area_per}
\end{figure}
\vspace{0.5cm}
g_area_diff,
g_area_diff
library(Rmisc)
multiplot(plotlist = list(g_cir_diff, g_ar_diff), cols = 2)
install.packages("RMySQL")
library("RMySQL")
mydb = dbConnect(MySQL(), user="root", password="root",
dbname="classicmodels", host="127.0.0.1")
mydb = dbConnect(MySQL(), user="root", password="x120364513",
dbname="classicmodels", host="127.0.0.1")
?read.table
install.packages('gapminder', repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(gapminder)
filter(gapminder, lifeExp < 30)
View(gapminder)
dim(gapminder)
install_github('slidify', 'ramnathv')
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("Presentation")
library(devtools)
install_github('slidify', 'ramnathv')
library(slidify)
author("mydeck")
getwd()
slidify('index.md')
library(slidigy)
library(slidify)
library(slidigy)
slidify('index.md')
view_deck()
View_deck()
slidify('index.rmd')
slidify('index.Rmd')
view_deck()
shiny::runApp('app_oral')
install.packages("googleVis")
library(googleVis)
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(Value="#,###"))
print(tab)
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(Value="#,###"))
print(tab, "chart")
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(width=200, height=270))
print(tab, file="figs/gvis8.html")
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(width=200, height=270))
print(tab)
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(width=200, height=270))
# print(tab)
t = gvisMerge(M, tbl)
print(t)
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(width=200, height=270))
# print(tab)
t = gvisMerge(tab)
print(t)
data(Fruits)
View(Fruits)
M <- gvisMotionChart(Fruits, "Fruit", "Year")
str(M)
M$chart
M <- gvisMotionChart(Fruits, "Fruit", "Year")
str(M)
print(M, tag="chart")
M
runApp('app_oral')
library(googleVis)
source('~/Google Drive/UMN2014-2016/Spring2016/Plan B/Oral_defence/app_oral/app.R', echo=TRUE)
shinyUI(pageWithSidebar(
headerPanel("Example 4: pageable table"),
sidebarPanel(
checkboxInput(inputId = "pageable", label = "Pageable"),
conditionalPanel("input.pageable==true",
numericInput(inputId = "pagesize",
label = "Countries per page",10))
),
mainPanel(
htmlOutput("myTable")
)
))
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(datasets)
library(googleVis)
library(shiny)
shinyServer(function(input, output) {
myOptions <- reactive({
list(
page=ifelse(input$pageable==TRUE,'enable','disable'),
pageSize=input$pagesize,
width=550
)
})
output$myTable <- renderGvis({
gvisTable(Population,options=myOptions())
})
})
shinyUI(pageWithSidebar(
headerPanel("Example 4: pageable table"),
sidebarPanel(
checkboxInput(inputId = "pageable", label = "Pageable"),
conditionalPanel("input.pageable==true",
numericInput(inputId = "pagesize",
label = "Countries per page",10))
),
mainPanel(
htmlOutput("myTable")
)
))
library(googleVis)
library(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(datasets)
library(googleVis)
library(shiny)
shinyServer(function(input, output) {
myOptions <- reactive({
list(
page=ifelse(input$pageable==TRUE,'enable','disable'),
pageSize=input$pagesize,
width=550
)
})
output$myTable <- renderGvis({
gvisTable(Population,options=myOptions())
})
})
shinyUI(pageWithSidebar(
headerPanel("Example 4: pageable table"),
sidebarPanel(
checkboxInput(inputId = "pageable", label = "Pageable"),
conditionalPanel("input.pageable==true",
numericInput(inputId = "pagesize",
label = "Countries per page",10))
),
mainPanel(
htmlOutput("myTable")
)
))
library(googleVis)
library(shiny)
runApp('app_oral')
runApp('app_oral')
install.packages("rCharts")
install.packages(c("animation", "assertthat", "bit64", "boot", "caret", "chron", "cluster", "curl", "DBI", "devtools", "filehash", "forecast", "forecastHybrid", "foreign", "formatR", "glmnet", "h2o", "Hmisc", "htmltools", "jsonlite", "lattice", "lme4", "MASS", "Matrix", "memoise", "pbkrtest", "plotly", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "repr", "rgl", "rmarkdown", "rpart", "rsconnect", "shiny", "sourcetools", "SparseM", "statmod", "survival", "tibble", "tidyr", "tm", "tseries", "viridis", "viridisLite", "XML", "zoo"))
sessionInfo()
library(googleVis)
options(gvis.plot.tag="chart")
g = gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
g$show("iframesrc", cdn = TRUE)
install.packages('googleVis')
install.packages(c("devtools","jsonlite", "knitr", "shiny", "httpuv"))
library(devtools)
install_github("mages/googleVis")
install.packages("googleVis")
demo(googleVis)
library(googleVis)
?googleVis
demo(googleVis)
library(devtools)
install_github("mages/googleVis")
library(googleVis)
g = gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
g$show("iframesrc", cdn = TRUE)
g = gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(g)
g = gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(g)
shiny::runApp('app_oral')
library(leaflet)
install.packages("leaflet")
runApp('app_oral')
unlink('test_cache', recursive = TRUE)
rmarkdown::shiny_prerendered_clean('test.Rmd')
install.packages("purrr")
