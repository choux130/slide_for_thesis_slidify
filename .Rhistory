geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area: 98.33% Simultaneous Confidence Interval of Difference by Location")+   coord_flip()
g_area_diff
\begin{figure}[!htbp]
\centering
<<echo=FALSE,warning=FALSE, message=FALSE,fig.width=8, fig.height=4>>=
library(Rmisc)
multiplot(plotlist = list(g_a,g_per), cols = 2)
@
\caption{95\% Confidence Interval for Overall mean and means by Locations for Area and Perimeter}
\label{m_area_per}
\end{figure}
\vspace{0.5cm}
g_area_diff,
g_area_diff
library(Rmisc)
multiplot(plotlist = list(g_cir_diff, g_ar_diff), cols = 2)
install.packages("RMySQL")
library("RMySQL")
mydb = dbConnect(MySQL(), user="root", password="root",
dbname="classicmodels", host="127.0.0.1")
mydb = dbConnect(MySQL(), user="root", password="x120364513",
dbname="classicmodels", host="127.0.0.1")
?read.table
install.packages('gapminder', repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(gapminder)
filter(gapminder, lifeExp < 30)
View(gapminder)
dim(gapminder)
install_github('slidify', 'ramnathv')
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("Presentation")
library(devtools)
install_github('slidify', 'ramnathv')
library(slidify)
author("mydeck")
getwd()
slidify('index.md')
library(slidigy)
library(slidify)
library(slidigy)
slidify('index.md')
view_deck()
View_deck()
slidify('index.rmd')
slidify('index.Rmd')
view_deck()
shiny::runApp('app_oral')
install.packages("googleVis")
library(googleVis)
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(Value="#,###"))
print(tab)
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(Value="#,###"))
print(tab, "chart")
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(width=200, height=270))
print(tab, file="figs/gvis8.html")
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(width=200, height=270))
print(tab)
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(width=200, height=270))
# print(tab)
t = gvisMerge(M, tbl)
print(t)
library(googleVis)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
tab = gvisTable(datt, formats=list(width=200, height=270))
# print(tab)
t = gvisMerge(tab)
print(t)
data(Fruits)
View(Fruits)
M <- gvisMotionChart(Fruits, "Fruit", "Year")
str(M)
M$chart
M <- gvisMotionChart(Fruits, "Fruit", "Year")
str(M)
print(M, tag="chart")
M
runApp('app_oral')
library(googleVis)
source('~/Google Drive/UMN2014-2016/Spring2016/Plan B/Oral_defence/app_oral/app.R', echo=TRUE)
shinyUI(pageWithSidebar(
headerPanel("Example 4: pageable table"),
sidebarPanel(
checkboxInput(inputId = "pageable", label = "Pageable"),
conditionalPanel("input.pageable==true",
numericInput(inputId = "pagesize",
label = "Countries per page",10))
),
mainPanel(
htmlOutput("myTable")
)
))
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(datasets)
library(googleVis)
library(shiny)
shinyServer(function(input, output) {
myOptions <- reactive({
list(
page=ifelse(input$pageable==TRUE,'enable','disable'),
pageSize=input$pagesize,
width=550
)
})
output$myTable <- renderGvis({
gvisTable(Population,options=myOptions())
})
})
shinyUI(pageWithSidebar(
headerPanel("Example 4: pageable table"),
sidebarPanel(
checkboxInput(inputId = "pageable", label = "Pageable"),
conditionalPanel("input.pageable==true",
numericInput(inputId = "pagesize",
label = "Countries per page",10))
),
mainPanel(
htmlOutput("myTable")
)
))
library(googleVis)
library(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(datasets)
library(googleVis)
library(shiny)
shinyServer(function(input, output) {
myOptions <- reactive({
list(
page=ifelse(input$pageable==TRUE,'enable','disable'),
pageSize=input$pagesize,
width=550
)
})
output$myTable <- renderGvis({
gvisTable(Population,options=myOptions())
})
})
shinyUI(pageWithSidebar(
headerPanel("Example 4: pageable table"),
sidebarPanel(
checkboxInput(inputId = "pageable", label = "Pageable"),
conditionalPanel("input.pageable==true",
numericInput(inputId = "pagesize",
label = "Countries per page",10))
),
mainPanel(
htmlOutput("myTable")
)
))
library(googleVis)
library(shiny)
runApp('app_oral')
runApp('app_oral')
install.packages("rCharts")
install.packages(c("animation", "assertthat", "bit64", "boot", "caret", "chron", "cluster", "curl", "DBI", "devtools", "filehash", "forecast", "forecastHybrid", "foreign", "formatR", "glmnet", "h2o", "Hmisc", "htmltools", "jsonlite", "lattice", "lme4", "MASS", "Matrix", "memoise", "pbkrtest", "plotly", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "repr", "rgl", "rmarkdown", "rpart", "rsconnect", "shiny", "sourcetools", "SparseM", "statmod", "survival", "tibble", "tidyr", "tm", "tseries", "viridis", "viridisLite", "XML", "zoo"))
sessionInfo()
library(googleVis)
options(gvis.plot.tag="chart")
g = gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
g$show("iframesrc", cdn = TRUE)
install.packages('googleVis')
install.packages(c("devtools","jsonlite", "knitr", "shiny", "httpuv"))
library(devtools)
install_github("mages/googleVis")
install.packages("googleVis")
demo(googleVis)
library(googleVis)
?googleVis
demo(googleVis)
library(devtools)
install_github("mages/googleVis")
library(googleVis)
g = gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
g$show("iframesrc", cdn = TRUE)
g = gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(g)
g = gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(g)
shiny::runApp('app_oral')
library(leaflet)
install.packages("leaflet")
runApp('app_oral')
unlink('test_cache', recursive = TRUE)
rmarkdown::shiny_prerendered_clean('test.Rmd')
install.packages("purrr")
?gvisTable
?gvisTable
?googleVis::gvisTable
library(googleVis)
options(gvis.plot.tag="chart")
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE
View(datt)
options(gvis.plot.tag="chart")
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
View(datt)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
datt = datt[,-1]
dim(datt)
View(datt)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
datt = datt[,-c(1,4,5)]
names(datt)
require(devtools)
# pkgs = c('slidify', 'slidifyLibraries', 'rChart', 'ggplot2')
# install_github(pkgs, 'ramnathv', ref = 'dev')
library(slidifyLibraries)
library(googleVis)
library(ggplot2)
library(plotly)
options(gvis.plot.tag="chart")
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
dat = datt[,-c(1,4,5)]
names(dat) = c("Sample ID", "# in image", "image No.",
"image name", "location", "PMD", "SI",
"Area", "Perimeter", "Circularity",
"Aspect Ratio")
tab = gvisTable(dat, options=list(page='enable', height=500, colors="['#9dcbba', '#9dcbba', '#9dcbba']"))
plot(tab)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
htmlwidgets::saveWidget(as_widget(p1), file = "hist_a.html")
p2 <- ggplotly(box_PMD_a)
htmlwidgets::saveWidget(as_widget(p2), file = "box_a.html")
require(devtools)
# pkgs = c('slidify', 'slidifyLibraries', 'rChart', 'ggplot2')
# install_github(pkgs, 'ramnathv', ref = 'dev')
library(slidifyLibraries)
library(googleVis)
library(plotly)
devtools::install_github('hadley/ggplot2')
library('hadley/ggplot2')
library(ggplot2)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
htmlwidgets::saveWidget(as_widget(p1), file = "hist_a.html")
p2 <- ggplotly(box_PMD_a)
htmlwidgets::saveWidget(as_widget(p2), file = "box_a.html")
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
htmlwidgets::saveWidget(as_widget(p1), file = "hist_a.html")
p2 <- ggplotly(box_PMD_a)
htmlwidgets::saveWidget(as_widget(p2), file = "box_a.html")
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
dat = datt[,-c(1,4,5)]
names(dat) = c("Sample ID", "# in image", "image No.",
"image name", "location", "PMD", "SI",
"Area", "Perimeter", "Circularity",
"Aspect Ratio")
tab = gvisTable(dat, options=list(page='enable', height=500, colors="['#9dcbba', '#9dcbba', '#9dcbba']"))
plot(tab)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
require(devtools)
devtools::install_github('hadley/ggplot2')
devtools::install_github("ropensci/plotly")
# pkgs = c('slidify', 'slidifyLibraries', 'rChart', 'ggplot2')
# install_github(pkgs, 'ramnathv', ref = 'dev')
library(slidifyLibraries)
library(googleVis)
library(plotly)
library(ggplot2)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
library(slidifyLibraries)
library(googleVis)
library(plotly)
library(ggplot2)
require(devtools)
remove.packages('plotly')
remove.packages('gglplot2')
devtools::install_github('hadley/ggplot2')
devtools::install_github("ropensci/plotly")
# pkgs = c('slidify', 'slidifyLibraries', 'rChart', 'ggplot2')
# install_github(pkgs, 'ramnathv', ref = 'dev')
library(slidifyLibraries)
library(googleVis)
library(plotly)
library(ggplot2)
remove.packages('ggplot2')
devtools::install_github('hadley/ggplot2')
library(googleVis)
library(plotly)
library(ggplot2)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
p1 <- plotly::ggplotly(hist_PMD_a)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1$ggplotly(hist_PMD_a)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- plotly::ggplotly(hist_PMD_a)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
library(plotly)
p1 <- ggplotly(hist_PMD_a)
library("plotly", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
update.packages("plotly")
p1 <- ggplotly(hist_PMD_a)
remove.packages('plotly')
install.packages("plotly")
hist_PMD_p=ggplot(datt, aes(x=Perimeter, color=PMD,
fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.2)
box_PMD_p=ggplot(datt, aes(x=PMD, y=Perimeter, fill=PMD)) +
geom_boxplot()+
geom_point(position = position_jitter(h=0,w=0.3))
p1_p <- ggplotly(hist_PMD_p)
library(plotly)
remove.packages('ggplot2')
install.packages('ggplot2')
library(ggplot2)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
library(plotly)
p1 <- ggplotly(hist_PMD_a)
update.packages("plotly")
update.packages("ggplot2")
library(devtools)
library(slidifyLibraries)
library(googleVis)
library(ggplot2)
library(plotly)
hist_PMD_a=ggplot(datt, aes(x=Area, color=PMD, fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)
box_PMD_a=ggplot(datt, aes(x=PMD, y=Area, fill=PMD)) +
geom_boxplot() +
geom_point(position = position_jitter(h=0,w=0.3))
p1 <- ggplotly(hist_PMD_a)
htmlwidgets::saveWidget(as_widget(p1), file = "hist_a.html")
p2 <- ggplotly(box_PMD_a)
htmlwidgets::saveWidget(as_widget(p2), file = "box_a.html")
hist_PMD_p=ggplot(datt, aes(x=Perimeter, color=PMD,
fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.2)
box_PMD_p=ggplot(datt, aes(x=PMD, y=Perimeter, fill=PMD)) +
geom_boxplot()+
geom_point(position = position_jitter(h=0,w=0.3))
p1_p <- ggplotly(hist_PMD_p)
htmlwidgets::saveWidget(as_widget(p1_p), file = "hist_p.html")
p2_p <- ggplotly(box_PMD_p)
htmlwidgets::saveWidget(as_widget(p2_p), file = "box_p.html")
hist_PMD_c=ggplot(datt, aes(x=Circularity, color=PMD,
fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.2)
box_PMD_c=ggplot(datt,aes(x=PMD,y=Circularity,fill=PMD)) +
geom_boxplot()+
geom_point(position = position_jitter(h=0,w=0.3))
p1_c <- ggplotly(hist_PMD_c)
htmlwidgets::saveWidget(as_widget(p1_c), file = "hist_c.html")
p2_c <- ggplotly(box_PMD_c)
htmlwidgets::saveWidget(as_widget(p2_c), file = "box_c.html")
hist_PMD_ar=ggplot(datt, aes(x=Aspect.Ratio, color=PMD,
fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.2)
box_PMD_ar=ggplot(datt, aes(x=PMD, y=Aspect.Ratio,
fill=PMD)) +
geom_boxplot()+
geom_point(position = position_jitter(h=0,w=0.3))
p1_ar <- ggplotly(hist_PMD_ar)
htmlwidgets::saveWidget(as_widget(p1_ar), file = "hist_ar.html")
p2_ar <- ggplotly(box_PMD_ar)
htmlwidgets::saveWidget(as_widget(p2_ar), file = "box_ar.html")
author("mydeck")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("mydeck")
library(slidify)
author("mydeck")
install.packages("DT")
hist_PMD_c=ggplot(datt, aes(x=Circularity, color=PMD,
fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.2)
box_PMD_c=ggplot(datt,aes(x=PMD,y=Circularity,fill=PMD)) +
geom_boxplot()+
geom_point(position = position_jitter(h=0,w=0.3))
library(ggplot2)
hist_PMD_c=ggplot(datt, aes(x=Circularity, color=PMD,
fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.2)
box_PMD_c=ggplot(datt,aes(x=PMD,y=Circularity,fill=PMD)) +
geom_boxplot()+
geom_point(position = position_jitter(h=0,w=0.3))
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
hist_PMD_c=ggplot(datt, aes(x=Circularity, color=PMD,
fill=PMD))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.2)
box_PMD_c=ggplot(datt,aes(x=PMD,y=Circularity,fill=PMD)) +
geom_boxplot()+
geom_point(position = position_jitter(h=0,w=0.3))
