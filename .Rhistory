set_stae.per.all[i] = stae.per_boot[1]
set_stae.per.p[i] = stae.per_boot[2]
set_stae.per.m[i] = stae.per_boot[3]
set_stae.per.d[i] = stae.per_boot[4]
set_diff_wm.per.pm[i] = wm.per_boot[2] - wm.per_boot[3]
set_diff_wm.per.md[i] = wm.per_boot[3] - wm.per_boot[4]
set_diff_wm.per.pd[i] = wm.per_boot[2] - wm.per_boot[4]
set_diff_stae.per.pm[i] = set_stae.per.p[i] - set_stae.per.m[i]
set_diff_stae.per.md[i] = set_stae.per.m[i] - set_stae.per.d[i]
set_diff_stae.per.pd[i] = set_stae.per.p[i] - set_stae.per.d[i]
}
## CI ####
### overall and every locations ####
ci_wm.per.all=quantile(set_wm.per.all,c(0.05/2,1-0.05/2)) # 147.8760 171.0028
ci_wm.per.p=quantile(set_wm.per.p,c(0.05/2,1-0.05/2)) # 164.4985 191.4685
ci_wm.per.m=quantile(set_wm.per.m,c(0.05/2,1-0.05/2)) # 177.8577 209.6533
ci_wm.per.d=quantile(set_wm.per.d,c(0.05/2,1-0.05/2)) # 121.0496 150.0380
ci_stae.per.all=quantile(set_stae.per.all,c(0.05/2,1-0.05/2)) # 123.2696 138.3049
ci_stae.per.p=quantile(set_stae.per.p,c(0.05/2,1-0.05/2)) # 123.3723 147.1682
ci_stae.per.m=quantile(set_stae.per.m,c(0.05/2,1-0.05/2)) # 137.3493 158.8023
ci_stae.per.d=quantile(set_stae.per.d,c(0.05/2,1-0.05/2)) # 95.11829 120.94418
### difference in each pairs ####
#### P vs. M
ci_wm.per.pm=quantile(set_diff_wm.per.pm,c(0.0167/2,1-0.0167/2)) # -41.62799  10.16246
ci_stae.per.pm=quantile(set_diff_stae.per.pm,c(0.0167/2,1-0.0167/2)) # -32.273450   6.945564
#### M vs. D
ci_wm.per.md=quantile(set_diff_wm.per.md,c(0.0167/2,1-0.0167/2)) # 32.03035 84.53292
ci_stae.per.md=quantile(set_diff_stae.per.md,c(0.0167/2,1-0.0167/2)) # 19.23077 60.69774
#### P vs. D
ci_wm.per.pd=quantile(set_diff_wm.per.pd,c(0.0167/2,1-0.0167/2)) # 17.91930 66.71862
ci_stae.per.pd=quantile(set_diff_stae.per.pd,c(0.0167/2,1-0.0167/2)) # 6.08976 48.08719
# SET DATA ####
datt.cir=datt$Circularity
datt.cir_p=datt[datt$PMD=="P",]$Circularity
datt.cir_m=datt[datt$PMD=="M",]$Circularity
datt.cir_d=datt[datt$PMD=="D",]$Circularity
# BOOTSTRAP FOR CI ####
## Setting Arguments ####
reps=10000
set.seed(12345)
set_m.cir.all=numeric(length=reps)
set_m.cir.p=numeric(length=reps)
set_m.cir.m=numeric(length=reps)
set_m.cir.d=numeric(length=reps)
set_diff_m.cir.pm = numeric(length=reps)
set_diff_m.cir.md = numeric(length=reps)
set_diff_m.cir.pd = numeric(length=reps)
## Bootstrap Algorithm ####
for (i in 1:reps){
boot.datt.cir=sample(datt.cir,length(datt.cir),replace=T)
boot.datt.cir_p=sample(datt.cir_p,length(datt.cir_p),replace=T)
boot.datt.cir_m=sample(datt.cir_m,length(datt.cir_m),replace=T)
boot.datt.cir_d=sample(datt.cir_d,length(datt.cir_d),replace=T)
m.cir_boot=c(mean(boot.datt.cir), mean(boot.datt.cir_p),
mean(boot.datt.cir_m), mean(boot.datt.cir_d))
set_m.cir.all[i]=m.cir_boot[1]
set_m.cir.p[i]=m.cir_boot[2]
set_m.cir.m[i]=m.cir_boot[3]
set_m.cir.d[i]=m.cir_boot[4]
set_diff_m.cir.pm[i] = m.cir_boot[2] - m.cir_boot[3]
set_diff_m.cir.md[i] = m.cir_boot[3] - m.cir_boot[4]
set_diff_m.cir.pd[i] = m.cir_boot[2] - m.cir_boot[4]
}
## CI ####
### overall and every locations ####
ci_m.cir.all=quantile(set_m.cir.all,c(0.05/2,1-0.05/2)) # 0.7207111 0.7566492
ci_m.cir.p=quantile(set_m.cir.p,c(0.05/2,1-0.05/2)) # 0.7105172 0.7760976
ci_m.cir.m=quantile(set_m.cir.m,c(0.05/2,1-0.05/2)) # 0.7466694 0.7937179
ci_m.cir.d=quantile(set_m.cir.d,c(0.05/2,1-0.05/2)) # 0.6681738 0.7322703
### difference in each pairs ####
#### P vs. M
ci_m.cir.pm=quantile(set_diff_m.cir.pm,c(0.0167/2,1-0.0167/2)) # -0.07683523  0.02251121
#### M vs. D
ci_m.cir.md=quantile(set_diff_m.cir.md,c(0.0167/2,1-0.0167/2)) # 0.02000446 0.11876638
#### P vs. D
ci_m.cir.pd=quantile(set_diff_m.cir.pd,c(0.0167/2,1-0.0167/2)) # -0.01389986  0.09895042
@
<<echo=FALSE,warning=FALSE, message=FALSE>>=
############################
####### Asepct Ratio #######
############################
# SET DATA ####
datt.ar=datt$Aspect.Ratio
datt.ar_p=datt[datt$PMD=="P",]$Aspect.Ratio
datt.ar_m=datt[datt$PMD=="M",]$Aspect.Ratio
datt.ar_d=datt[datt$PMD=="D",]$Aspect.Ratio
# BOOTSTRAP FOR CI ####
## Setting Arguments ####
reps=10000
set.seed(12345)
set_m.ar.all=numeric(length=reps)
set_m.ar.p=numeric(length=reps)
set_m.ar.m=numeric(length=reps)
set_m.ar.d=numeric(length=reps)
set_diff_m.ar.pm = numeric(length=reps)
set_diff_m.ar.md = numeric(length=reps)
set_diff_m.ar.pd = numeric(length=reps)
## Bootstrap Algorithm ####
for (i in 1:reps){
boot.datt.ar=sample(datt.ar,length(datt.ar),replace=T)
boot.datt.ar_p=sample(datt.ar_p,length(datt.ar_p),replace=T)
boot.datt.ar_m=sample(datt.ar_m,length(datt.ar_m),replace=T)
boot.datt.ar_d=sample(datt.ar_d,length(datt.ar_d),replace=T)
m.ar_boot=c(mean(boot.datt.ar), mean(boot.datt.ar_p),
mean(boot.datt.ar_m), mean(boot.datt.ar_d))
set_m.ar.all[i]=m.ar_boot[1]
set_m.ar.p[i]=m.ar_boot[2]
set_m.ar.m[i]=m.ar_boot[3]
set_m.ar.d[i]=m.ar_boot[4]
set_diff_m.ar.pm[i] = m.ar_boot[2] - m.ar_boot[3]
set_diff_m.ar.md[i] = m.ar_boot[3] - m.ar_boot[4]
set_diff_m.ar.pd[i] = m.ar_boot[2] - m.ar_boot[4]
}
## CI ####
### overall and every locations ####
ci_m.ar.all=quantile(set_m.ar.all,c(0.05/2,1-0.05/2)) # 1.399457 1.558271
ci_m.ar.p=quantile(set_m.ar.p,c(0.05/2,1-0.05/2)) # 1.384360 1.704902
ci_m.ar.m=quantile(set_m.ar.m,c(0.05/2,1-0.05/2)) # 1.268968 1.490073
ci_m.ar.d=quantile(set_m.ar.d,c(0.05/2,1-0.05/2)) # 1.409164 1.657349
### difference in each pairs ####
#### P vs. M
ci_m.ar.pm=quantile(set_diff_m.ar.pm,c(0.0167/2,1-0.0167/2)) # -0.07729163  0.40830669
#### M vs. D
ci_m.ar.md=quantile(set_diff_m.ar.md,c(0.0167/2,1-0.0167/2)) # -0.36042486  0.04415264
#### P vs. D
ci_m.ar.pd=quantile(set_diff_m.ar.pd,c(0.0167/2,1-0.0167/2)) # -0.2379284  0.2610344
d_a=data.frame(
est=rep(c("WM", "MLE"),each=3),
loc=rep(c("P","M","D"),2),
value= c(wm.area[2:4],mle.area[2:4]),
low=c(ci_wm.area.p[1], ci_wm.area.m[1],ci_wm.area.d[1],
ci_mle.area.p[1], ci_mle.area.m[1],ci_mle.area.d[1]),
up=c(ci_mle.area.p[2], ci_mle.area.m[2],ci_mle.area.d[2],
ci_mle.area.p[2], ci_mle.area.m[2],ci_mle.area.d[2])
)
d_a
d_a=round(d_a, 2)
d_a[,3:5]=round(d_a, 2)
d_a[,3:5]=round(d_a[,3:5], 2)
d_a
ggplot(d_a, aes(loc, est, color=est)) +
geom_point(aes(shape=est),size=3, position=pd) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1,
position=pd)+
ggtitle("Area") + coord_flip()
ggplot(d_a, aes(loc, est, color=est)) +
geom_point(aes(shape=est),size=3) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1)+
ggtitle("Area") + coord_flip()
str(d_a)
ggplot(d_a, aes(loc, est, color=est)) +
geom_point(aes(shape=est),size=3) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1)+
ggtitle("Area")
position_dodge(width=0.5)
g_area= ggplot(d_a, aes(loc, est, color=est)) +
geom_point(aes(shape=est),size=3, position=pd) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1, position=pd)+
ggtitle("Area")
pd <- position_dodge(width=0.5)
ggplot(d_a, aes(loc, est, color=est)) +
geom_point(aes(shape=est),size=3, position=pd) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1, position=pd)+
ggtitle("Area")
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1, position=pd)+
ggtitle("Area")
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=value),size=3, position=pd) +
scale_color_manual(name="Estimator",
values=c("coral","steelblue")) +
scale_shape_manual(name="Estimator",values=c(17,19)) +
scale_y_continuous("value") +
geom_errorbar(aes(ymin=low,ymax=up),width=0.1, position=pd)+
ggtitle("Area")
ggplot(d_a, aes(loc, value, color=est)) +
geom_linerange(aes(ymin = low, ymax = up))
ggplot(d_a, aes(loc, value, color=est)) +
geom_errorbar(aes(ymin=low,ymax=up)
ggplot(d_a, aes(loc, value, color=est)) +
geom_errorbar(aes(ymin=low,ymax=up))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=value),size=3, position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)
ci_mle.area.p
d_a=data.frame(
est=rep(c("WM", "MLE"),each=3),
loc=rep(c("P","M","D"),2),
value= c(wm.area[2:4],mle.area[2:4]),
low=c(ci_wm.area.p[1], ci_wm.area.m[1],ci_wm.area.d[1],
ci_mle.area.p[1], ci_mle.area.m[1],ci_mle.area.d[1]),
up=c(ci_wm.area.p[2], ci_wm.area.m[2],ci_wm.area.d[2],
ci_mle.area.p[2], ci_mle.area.m[2],ci_mle.area.d[2])
)
d_a[,3:5]=round(d_a[,3:5], 2)
pd <- position_dodge(width=0.5)
g_area= ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)
geom_errorbar(aes(ymin=low,ymax=up))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_color_manual(name="Estimator",
values=c("coral","steelblue"))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd, name="Estimator")+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_shape_manual(name="Estimator",values=c(17,19))
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)
ggplot(d_a, aes(loc, value, color=est)) +
geom_point(aes(shape=est),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_shape_manual(name="Estimator",values=c(17,19))
d_a=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(wm.area[2:4],mle.area[2:4]),
low=c(ci_wm.area.p[1], ci_wm.area.m[1],ci_wm.area.d[1],
ci_mle.area.p[1], ci_mle.area.m[1],ci_mle.area.d[1]),
up=c(ci_wm.area.p[2], ci_wm.area.m[2],ci_wm.area.d[2],
ci_mle.area.p[2], ci_mle.area.m[2],ci_mle.area.d[2])
)
d_a[,3:5]=round(d_a[,3:5], 2)
pd <- position_dodge(width=0.5)
g_area= ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_shape_manual(name="Estimator",values=c(17,19))
g_are
g_area
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd)+
scale_shape_manual(name="Estimator",values=c(17,19))
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area") + coord_flip()
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33\% Simultaneous Confidence Interval of Area")+   coord_flip()
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33 \% Simultaneous Confidence Interval of Area")+   coord_flip()
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33 % Simultaneous Confidence Interval of Area")+   coord_flip()
ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33% Simultaneous Confidence Interval of Area")+   coord_flip()
d_per=data.frame(
Estimator=rep(c("WM", "2TAE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(wm.per[2:4], stae.area[2:4]),
low=c(ci_wm.per.p[1], ci_wm.per.m[1],ci_wm.per.d[1],
ci_stae.per.p[1], ci_stae.per.m[1],stae.per.d[1]),
up=c(ci_wm.per.p[2], ci_wm.per.m[2],ci_wm.per.d[2],
ci_stae.per.p[2], ci_stae.per.m[2],ci_stae.per.d[2])
)
d_per[,3:5]=round(d_per[,3:5], 2)
d_per=data.frame(
Estimator=rep(c("WM", "2TAE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(wm.per[2:4], stae.per[2:4]),
low=c(ci_wm.per.p[1], ci_wm.per.m[1],ci_wm.per.d[1],
ci_stae.per.p[1], ci_stae.per.m[1],ci_stae.per.d[1]),
up=c(ci_wm.per.p[2], ci_wm.per.m[2],ci_wm.per.d[2],
ci_stae.per.p[2], ci_stae.per.m[2],ci_stae.per.d[2])
)
d_per[,3:5]=round(d_per[,3:5], 2)
d_per
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(am.cir[2:4], am.cir[2:4]),
low=c(ci_am.cir.p[1], ci_am.cir.m[1],ci_am.cir.d[1]),
up=c(ci_am.cir.p[2], ci_am.cir.m[2],ci_am.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 2)
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.cir[2:4]),
low=c(ci_am.cir.p[1], ci_am.cir.m[1],ci_am.cir.d[1]),
up=c(ci_am.cir.p[2], ci_am.cir.m[2],ci_am.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 2)
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.cir[2:4]),
low=c(ci_m.cir.p[1], ci_m.cir.m[1],ci_m.cir.d[1]),
up=c(ci_m.cir.p[2], ci_m.cir.m[2],ci_m.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 2)
d_cir
d_cir[,3:5]=round(d_cir[,3:5], 3)
d_cir
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.cir[2:4]),
low=c(ci_m.cir.p[1], ci_m.cir.m[1],ci_m.cir.d[1]),
up=c(ci_m.cir.p[2], ci_m.cir.m[2],ci_m.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 3)
d_cir
d_per
d_ar=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.ar[2:4]),
low=c(ci_m.ar.p[1], ci_m.ar.m[1],ci_m.ar.d[1]),
up=c(ci_m.ar.p[2], ci_m.ar.m[2],ci_m.ar.d[2])
)
d_ar[,3:5]=round(d_ar[,3:5], 3)
d_ar
ggplot(d_per, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33% Simultaneous Confidence Interval of Perimeter")+   coord_flip()
ggplot(d_cir, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33% Simultaneous Confidence Interval of Circularity")+ coord_flip()
g_ar= ggplot(d_ar, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("98.33% Simultaneous Confidence Interval of Aspect Ratio")+   coord_flip()
g_ar
d_a_diff=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(t_mw.area.pd[2:4],t_mle.area.pd[2:4]),
low=c(ci_wm.area.pm[1], ci_wm.area.md[1],ci_wm.area.pd[1],
ci_mle.area.pm[1], ci_mle.area.md[1],ci_mle.area.pd[1]),
up=c(ci_wm.area.pm[2], ci_wm.area.md[2],ci_wm.area.pd[2],
ci_mle.area.pm[2], ci_mle.area.md[2],ci_mle.area.pd[2])
)
t_mw.area.pd
t_wn.area.pd
t_wm.area.pd
d_a_diff=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(t_wm.area.pm,t_wm.area.md, t_wm.area.pd,
t_mle.area.pm,t_mle.area.md,t_mle.area.pd),
low=c(ci_wm.area.pm[1], ci_wm.area.md[1],ci_wm.area.pd[1],
ci_mle.area.pm[1], ci_mle.area.md[1],ci_mle.area.pd[1]),
up=c(ci_wm.area.pm[2], ci_wm.area.md[2],ci_wm.area.pd[2],
ci_mle.area.pm[2], ci_mle.area.md[2],ci_mle.area.pd[2])
)
d_a_diff
d_a_diff[,3:5]=round(d_a[,3:5], 2)
d_a_diff
d_a_diff[,3:5]=round(d_a_diff[,3:5], 2)
d_a_diff
d_a_diff=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(t_wm.area.pm,t_wm.area.md, t_wm.area.pd,
t_mle.area.pm,t_mle.area.md,t_mle.area.pd),
low=c(ci_wm.area.pm[1], ci_wm.area.md[1],ci_wm.area.pd[1],
ci_mle.area.pm[1], ci_mle.area.md[1],ci_mle.area.pd[1]),
up=c(ci_wm.area.pm[2], ci_wm.area.md[2],ci_wm.area.pd[2],
ci_mle.area.pm[2], ci_mle.area.md[2],ci_mle.area.pd[2])
)
d_a_diff[,3:5]=round(d_a_diff[,3:5], 2)
d_a_diff
d_per_diff=data.frame(
Estimator=rep(c("WM", "2TAE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(t_wm.per.pm,t_wm.per.md, t_wm.per.pd,
t_stae.per.pm,t_stae.per.md,t_stae.per.pd),
low=c(ci_wm.per.pm[1], ci_wm.per.md[1],ci_wm.per.pd[1],
ci_stae.per.pm[1], ci_stae.per.md[1],ci_stae.per.pd[1]),
up=c(ci_wm.per.pm[2], ci_wm.per.md[2],ci_wm.per.pd[2],
ci_stae.per.pm[2], ci_stae.per.md[2],ci_stae.per.pd[2])
)
d_per_diff[,3:5]=round(d_per_diff[,3:5], 2)
d_per_diff
d_cir_diff=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(t_m.cir.pm,t_m.cir.md, t_m.cir.pd),
low=c(ci_m.cir.pm[1], ci_m.cir.md[1],ci_m.cir.pd[1]),
up=c(ci_m.cir.pm[2], ci_m.cir.md[2],ci_m.cir.pd[2])
)
d_cir_diff[,3:5]=round(d_cir_diff[,3:5], 2)
d_cir
ci_m.cir.pm
d_cir_diff=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(t_m.cir.pm,t_m.cir.md, t_m.cir.pd),
low=c(ci_m.cir.pm[1], ci_m.cir.md[1],ci_m.cir.pd[1]),
up=c(ci_m.cir.pm[2], ci_m.cir.md[2],ci_m.cir.pd[2])
)
d_cir_diff
d_cir_diff[,3:5]=round(d_cir_diff[,3:5], 3)
d_cir_diff
d_ar_diff=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(t_m.ar.pm,t_m.ar.md, t_m.ar.pd),
low=c(ci_m.ar.pm[1], ci_m.ar.md[1],ci_m.ar.pd[1]),
up=c(ci_m.ar.pm[2], ci_m.ar.md[2],ci_m.ar.pd[2])
)
d_ar_diff[,3:5]=round(d_ar_diff[,3:5], 3)
d_ar_diff
pd <- position_dodge(width=0.5)
g_area_diff= ggplot(d_a_diff,
aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area: 98.33% Simultaneous Confidence Interval of Difference by Location")+   coord_flip()
g_area_diff
\begin{figure}[!htbp]
\centering
<<echo=FALSE,warning=FALSE, message=FALSE,fig.width=8, fig.height=4>>=
library(Rmisc)
multiplot(plotlist = list(g_a,g_per), cols = 2)
@
\caption{95\% Confidence Interval for Overall mean and means by Locations for Area and Perimeter}
\label{m_area_per}
\end{figure}
\vspace{0.5cm}
g_area_diff,
g_area_diff
library(Rmisc)
multiplot(plotlist = list(g_cir_diff, g_ar_diff), cols = 2)
install.packages("RMySQL")
library("RMySQL")
mydb = dbConnect(MySQL(), user="root", password="root",
dbname="classicmodels", host="127.0.0.1")
mydb = dbConnect(MySQL(), user="root", password="x120364513",
dbname="classicmodels", host="127.0.0.1")
?read.table
install.packages('gapminder', repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(gapminder)
filter(gapminder, lifeExp < 30)
View(gapminder)
dim(gapminder)
install_github('slidify', 'ramnathv')
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("Presentation")
library(devtools)
install_github('slidify', 'ramnathv')
library(slidify)
author("mydeck")
getwd()
